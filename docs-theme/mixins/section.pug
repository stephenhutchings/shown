- count = 0

mixin section(section, nested)
  section.py3.mb2.clearfix
    if !nested
      h2.my0(
        id=format.slug(section.namespace)
      )
        = format.toUpperCase(section.name)

    //- if section.context && section.context.github
      a.ml-auto(
        href=section.context.github.url
      )
        span= section.context.github.path

    != format.md(section.description)

    if section.kind !== "typedef"
      .comment.pre.p1.fill-light.mt0
        +signature(section, true)

      if section.type
        p
          | Type:
          != format.type(section.type)

    if section.augments && section.augments.length
      p
        | Extends
        if section.augments
          = section.augments.map(tag => format.autolink(tag.name)).join(', ')

    if section.deprecated
      div Deprecated: !{format.md(section.deprecated, true)}

    if section.version
      div Version: #{section.version}

    if section.license
      div License: #{section.license}

    if section.author
      div Author: #{section.author}

    if section.copyright
      div Copyright: !{format.md(section.copyright, true)}

    if section.since
      div Since: !{format.md(section.since, true)}

    if section.params && section.params.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-params"
      ) Parameters

      .prose
        each param in section.params
          div
            +property-name(param)

            if param.description
              p.m0
                != format.md(param.description, true)

          if param.properties
            +property-table(param.properties)

    if section.properties && section.properties.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-properties"
      ) Properties

      .prose
        +property-table(section.properties)

    if section.returns && section.returns.length
      each r in section.returns
        h3.mt3.mb0.prose-big(
          id=format.slug(section.namespace) + "-returns"
        ) Returns
        code!= format.type(r.type)
        if r.description
          = " "
          != format.md(r.description, true)

    if section.sees && section.sees.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-sees"
      ) Related
      each see in section.sees
        if see.description
          =JSON.stringify(see)

    if section.throws && section.throws.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-throws"
      ) Throws
      ul
        each t in section.throws
          li
            != format.type(t.type)
            |:
            != format.md(t.description, true)

    if section.examples && section.examples.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-examples"
      ) Example#{section.examples.length > 1 ? "s" : ""}
      each e in section.examples
        .example.my1
          if e.caption
            != format.md(e.caption)

          .sm-flex.items-stretch
            .example-result
              iframe(src=e.path width="100%" height="100%")

            .example-code.flex-auto.comment
              != format.highlight(e.description)
              != format.highlight(e.result, "html")

    if section.members.static && section.members.static.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-members-static"
      ) Static Members
      +section-list({
        members: section.members.static,
        noun: 'Static Member'
      })
      
    if section.members.instance && section.members.instance.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-members-instance"
      ) Instance Members
      +section-list({
        members: section.members.instance,
        noun: 'Instance Member'
      })

    if section.members.inner && section.members.inner.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-members-inner"
      ) Inner Members
      +section-list({
        members: section.members.inner,
        noun: 'Inner Member'
      })

    if section.members.events && section.members.events.length
      h3.mt3.mb0.prose-big(
        id=format.slug(section.namespace) + "-members-events"
      ) Events
      +section-list({
        members: section.members.events,
        noun: 'Event'
      })
